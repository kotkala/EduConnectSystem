const fs = require('fs');
const path = require('path');

// H√†m ƒë·ªÉ t√¨m t·∫•t c·∫£ c√°c file TypeScript/JavaScript
function findFiles(dir, extensions = ['.ts', '.tsx', '.js', '.jsx']) {
  let results = [];
  const list = fs.readdirSync(dir);
  
  list.forEach(file => {
    const filePath = path.join(dir, file);
    const stat = fs.statSync(filePath);
    
    if (stat && stat.isDirectory()) {
      // B·ªè qua c√°c th∆∞ m·ª•c kh√¥ng c·∫ßn thi·∫øt
      if (!['node_modules', '.next', '.git', 'dist', 'build'].includes(file)) {
        results = results.concat(findFiles(filePath, extensions));
      }
    } else {
      const ext = path.extname(file);
      if (extensions.includes(ext)) {
        results.push(filePath);
      }
    }
  });
  
  return results;
}

// H√†m ƒë·ªÉ t√¨m c√°c k√Ω t·ª± c√≥ th·ªÉ b·ªã encode
function findEncodedCharacters(filePath) {
  try {
    const content = fs.readFileSync(filePath, 'utf8');
    const lines = content.split('\n');
    const encodedLines = [];
    
    lines.forEach((line, index) => {
      // T√¨m c√°c pattern c√≥ th·ªÉ b·ªã encode
      // C√°c k√Ω t·ª± ƒë·∫∑c bi·ªát th∆∞·ªùng xu·∫•t hi·ªán trong encoding issues
      if (line.match(/[√É√Ñ√°¬∫√°¬∫¬ª√°¬ª]/)) {
        encodedLines.push({
          lineNumber: index + 1,
          content: line.trim()
        });
      }
    });
    
    return encodedLines;
  } catch (error) {
    console.error(`L·ªói khi ƒë·ªçc file ${filePath}:`, error.message);
    return [];
  }
}

// H√†m ch√≠nh
function main() {
  console.log('üîç Ki·ªÉm tra cu·ªëi c√πng c√°c k√Ω t·ª± ti·∫øng Vi·ªát b·ªã encode...\n');
  
  const srcDir = path.join(__dirname, 'src');
  
  if (!fs.existsSync(srcDir)) {
    console.error('‚ùå Kh√¥ng t√¨m th·∫•y th∆∞ m·ª•c src/');
    return;
  }
  
  const files = findFiles(srcDir);
  console.log(`üìÅ ƒêang ki·ªÉm tra ${files.length} file...\n`);
  
  let totalEncodedLines = 0;
  let filesWithEncoding = 0;
  const encodingIssues = [];
  
  files.forEach(filePath => {
    const encodedLines = findEncodedCharacters(filePath);
    if (encodedLines.length > 0) {
      const relativePath = path.relative(__dirname, filePath);
      filesWithEncoding++;
      totalEncodedLines += encodedLines.length;
      
      encodingIssues.push({
        file: relativePath,
        lines: encodedLines
      });
    }
  });
  
  console.log('üìä K·∫øt qu·∫£ ki·ªÉm tra:');
  console.log(`   - T·ªïng s·ªë file c√≥ v·∫•n ƒë·ªÅ encoding: ${filesWithEncoding}`);
  console.log(`   - T·ªïng s·ªë d√≤ng c√≥ k√Ω t·ª± b·ªã encode: ${totalEncodedLines}\n`);
  
  if (filesWithEncoding > 0) {
    console.log('‚ö†Ô∏è  C√°c file c√≤n k√Ω t·ª± b·ªã encode:');
    encodingIssues.forEach(issue => {
      console.log(`\nüìÑ ${issue.file}:`);
      issue.lines.forEach(line => {
        console.log(`   D√≤ng ${line.lineNumber}: ${line.content}`);
      });
    });
    
    console.log('\nüí° G·ª£i √Ω: C·∫ßn c·∫≠p nh·∫≠t mapping ƒë·ªÉ s·ª≠a c√°c k√Ω t·ª± n√†y.');
  } else {
    console.log('‚úÖ Tuy·ªát v·ªùi! Kh√¥ng c√≤n k√Ω t·ª± n√†o b·ªã encode.');
  }
}

// Ch·∫°y script
try {
  main();
} catch (error) {
  console.error('L·ªói khi ch·∫°y script:', error);
}
