'use client'

import { useState, useEffect, useMemo, useCallback } from 'react'
import { Plus, FileSpreadsheet, Edit, Trash2, Search, Calendar, Users, BookOpen } from 'lucide-react'

import { Button } from '@/components/ui/button'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Badge } from '@/components/ui/badge'
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'
import { toast } from 'sonner'
import {
  getGradeReportingPeriodsAction,
  deleteGradeReportingPeriodAction,
  getClassesForGradeInputAction,
  getSubjectsForGradeInputAction
} from '@/lib/actions/grade-management-actions'

import { GradeReportingPeriodForm } from '@/components/admin/grade-management/grade-reporting-period-form'
import { ExcelImportDialog } from '@/components/admin/grade-management/excel-import-dialog'
import { ViewGradesClient } from './view-grades/view-grades-client'


import { LoadingSpinner } from '@/components/ui/loading-spinner'
import { EmptyState } from '@/components/ui/empty-state'
import { ConfirmDialog } from '@/components/ui/confirm-dialog'
import type { GradeReportingPeriod } from '@/lib/validations/grade-management-validations'



export function GradeManagementClient() {
  const [periods, setPeriods] = useState<GradeReportingPeriod[]>([])
  const [classes, setClasses] = useState<Array<{id: string, name: string}>>([])
  const [subjects, setSubjects] = useState<Array<{id: string, name_vietnamese: string, code: string}>>([])
  const [loading, setLoading] = useState(true)
  const [selectedPeriod, setSelectedPeriod] = useState<GradeReportingPeriod | null>(null)
  const [showCreateForm, setShowCreateForm] = useState(false)
  const [showEditForm, setShowEditForm] = useState(false)
  const [showExcelImport, setShowExcelImport] = useState(false)

  const [showDeleteDialog, setShowDeleteDialog] = useState(false)
  const [activeTab, setActiveTab] = useState('periods')


  // Load grade reporting periods - Memoized to prevent unnecessary re-renders
  const loadPeriods = useCallback(async () => {
    try {
      setLoading(true)
      const result = await getGradeReportingPeriodsAction()

      if (result.success) {
        setPeriods((result.data || []) as unknown as GradeReportingPeriod[])
      } else {
        toast.error(result.error)
      }
    } catch {
      toast.error("Kh√¥ng th·ªÉ t·∫£i danh s√°ch k·ª≥ b√°o c√°o")
    } finally {
      setLoading(false)
    }
  }, [])

  // Load statistics data
  const loadStatistics = useCallback(async () => {
    try {
      const [classesResult, subjectsResult] = await Promise.all([
        getClassesForGradeInputAction(),
        getSubjectsForGradeInputAction()
      ])

      if (classesResult.success && classesResult.data) {
        setClasses(classesResult.data as unknown as Array<{id: string, name: string}>)
      }

      if (subjectsResult.success && subjectsResult.data) {
        setSubjects(subjectsResult.data as unknown as Array<{id: string, name_vietnamese: string, code: string}>)
      }

      // Students are now handled by ViewGradesClient component
    } catch (error) {
      console.error('Error loading statistics:', error)
    }
  }, [periods])

  // Handle delete period - Memoized to prevent unnecessary re-renders
  const handleDeletePeriod = useCallback(async () => {
    if (!selectedPeriod) return

    try {
      const result = await deleteGradeReportingPeriodAction(selectedPeriod.id)

      if (result.success) {
        toast.success(result.message)
        await loadPeriods()
      } else {
        toast.error(result.error)
      }
    } catch {
      toast.error("Kh√¥ng th·ªÉ x√≥a k·ª≥ b√°o c√°o")
    } finally {
      setShowDeleteDialog(false)
      setSelectedPeriod(null)
    }
  }, [selectedPeriod, loadPeriods])

  // Check if period allows operations
  const canImportGrades = useCallback((period: GradeReportingPeriod) => {
    const now = new Date()
    const startDate = new Date(period.start_date)
    const importDeadline = new Date(period.import_deadline)
    return now >= startDate && now <= importDeadline && period.is_active
  }, [])

  const canEditGrades = useCallback((period: GradeReportingPeriod) => {
    const now = new Date()
    const editDeadline = new Date(period.edit_deadline)
    return now <= editDeadline && period.is_active
  }, [])

  // Get period status
  const getPeriodStatus = useCallback((period: GradeReportingPeriod) => {
    const now = new Date()
    const startDate = new Date(period.start_date)
    const importDeadline = new Date(period.import_deadline)
    const editDeadline = new Date(period.edit_deadline)

    if (!period.is_active) {
      return { label: 'ƒê√£ v√¥ hi·ªáu h√≥a', variant: 'secondary' as const }
    }

    if (now < startDate) {
      return { label: 'Ch∆∞a b·∫Øt ƒë·∫ßu', variant: 'outline' as const }
    }

    if (now > editDeadline) {
      return { label: 'ƒê√£ kh√≥a', variant: 'destructive' as const }
    }

    if (now > importDeadline) {
      return { label: 'H·∫øt h·∫°n nh·∫≠p', variant: 'secondary' as const }
    }

    if (now <= importDeadline) {
      return { label: 'ƒêang m·ªü', variant: 'default' as const }
    }

    return { label: 'ƒêang ho·∫°t ƒë·ªông', variant: 'default' as const }
  }, [])

  // Format date for display
  const formatDate = useCallback((dateString: string) => {
    return new Date(dateString).toLocaleDateString('vi-VN', {
      year: 'numeric',
      month: '2-digit',
      day: '2-digit',
      hour: '2-digit',
      minute: '2-digit'
    })
  }, [])

  // Memoize periods with status calculations to prevent re-computation
  const periodsWithStatus = useMemo(() => {
    return periods.map(period => ({
      ...period,
      status: getPeriodStatus(period),
      canImport: canImportGrades(period),
      canEdit: canEditGrades(period)
    }))
  }, [periods, getPeriodStatus, canImportGrades, canEditGrades])

  useEffect(() => {
    loadPeriods()
  }, [loadPeriods])

  useEffect(() => {
    if (periods.length > 0) {
      loadStatistics()
    }
  }, [periods, loadStatistics])

  if (loading) {
    return (
      <div className="flex items-center justify-center py-12">
        <LoadingSpinner size="lg" />
        <span className="ml-2 text-muted-foreground">ƒêang t·∫£i d·ªØ li·ªáu...</span>
      </div>
    )
  }

  return (
    <div className="space-y-8">
      {/* Statistics Cards */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
        <Card>
          <CardContent className="p-6">
            <div className="flex items-center space-x-2">
              <Calendar className="h-5 w-5 text-blue-600" />
              <div>
                <p className="text-sm font-medium text-muted-foreground">K·ª≥ b√°o c√°o</p>
                <p className="text-2xl font-bold">{periods.length}</p>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-6">
            <div className="flex items-center space-x-2">
              <Users className="h-5 w-5 text-green-600" />
              <div>
                <p className="text-sm font-medium text-muted-foreground">L·ªõp h·ªçc</p>
                <p className="text-2xl font-bold">{classes.length}</p>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-6">
            <div className="flex items-center space-x-2">
              <BookOpen className="h-5 w-5 text-purple-600" />
              <div>
                <p className="text-sm font-medium text-muted-foreground">M√¥n h·ªçc</p>
                <p className="text-2xl font-bold">{subjects.length}</p>
              </div>
            </div>
          </CardContent>
        </Card>


      </div>

      {/* VNedu Disclaimer */}
      <Card className="bg-amber-50 border-amber-200">
        <CardHeader>
          <CardTitle className="text-amber-900 flex items-center">
            ‚ö†Ô∏è Mi·ªÖn tr·ª´ tr√°ch nhi·ªám v·ªÅ qu·∫£n l√Ω
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="text-amber-800 space-y-2">
            <p>
              <strong>L∆∞u √Ω quan tr·ªçng:</strong> H·ªá th·ªëng n√†y ch·ªâ ƒëang l·∫•y file upload Excel l√†m tham kh·∫£o t·ª´ ph·∫ßn m·ªÅm VNedu c·ªßa b√™n th·ª© 3.
            </p>
            <p>
              Ch√∫ng t√¥i kh√¥ng ch·ªãu tr√°ch nhi·ªám v·ªÅ t√≠nh ch√≠nh x√°c ho·∫∑c ƒë·∫ßy ƒë·ªß c·ªßa d·ªØ li·ªáu ƒë∆∞·ª£c nh·∫≠p t·ª´ c√°c template Excel n√†y.
              Vui l√≤ng ki·ªÉm tra k·ªπ th√¥ng tin tr∆∞·ªõc khi s·ª≠ d·ª•ng trong m√¥i tr∆∞·ªùng s·∫£n xu·∫•t.
            </p>
            <p className="text-sm">
              Template Excel ƒë∆∞·ª£c thi·∫øt k·∫ø t∆∞∆°ng th√≠ch v·ªõi ƒë·ªãnh d·∫°ng VNedu ƒë·ªÉ thu·∫≠n ti·ªán cho vi·ªác nh·∫≠p li·ªáu,
              nh∆∞ng kh√¥ng thay th·∫ø cho vi·ªác x√°c minh d·ªØ li·ªáu ch√≠nh th·ª©c.
            </p>
          </div>
        </CardContent>
      </Card>

      {/* Quick Start Guide */}
      <Card className="bg-blue-50 border-blue-200">
        <CardHeader>
          <CardTitle className="text-blue-900">üöÄ H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng nhanh</CardTitle>
          <CardDescription className="text-blue-700">
            Quy tr√¨nh qu·∫£n l√Ω ƒëi·ªÉm s·ªë theo th·ª© t·ª±:
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
            <div className="flex items-center space-x-3 p-3 bg-white rounded-lg border">
              <div className="flex-shrink-0 w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center text-blue-600 font-bold">1</div>
              <div>
                <div className="font-medium text-gray-900">T·∫°o k·ª≥ b√°o c√°o</div>
                <div className="text-sm text-gray-600">Thi·∫øt l·∫≠p th·ªùi gian v√† h·∫°n ch√≥t</div>
              </div>
            </div>
            <div className="flex items-center space-x-3 p-3 bg-white rounded-lg border">
              <div className="flex-shrink-0 w-8 h-8 bg-green-100 rounded-full flex items-center justify-center text-green-600 font-bold">2</div>
              <div>
                <div className="font-medium text-gray-900">T·∫£i template Excel</div>
                <div className="text-sm text-gray-600">L·∫•y file m·∫´u cho t·ª´ng l·ªõp</div>
              </div>
            </div>
            <div className="flex items-center space-x-3 p-3 bg-white rounded-lg border">
              <div className="flex-shrink-0 w-8 h-8 bg-orange-100 rounded-full flex items-center justify-center text-orange-600 font-bold">3</div>
              <div>
                <div className="font-medium text-gray-900">Nh·∫≠p ƒëi·ªÉm t·ª´ Excel</div>
                <div className="text-sm text-gray-600">Upload file ƒë√£ ƒëi·ªÅn ƒëi·ªÉm</div>
              </div>
            </div>
            <div className="flex items-center space-x-3 p-3 bg-white rounded-lg border">
              <div className="flex-shrink-0 w-8 h-8 bg-purple-100 rounded-full flex items-center justify-center text-purple-600 font-bold">4</div>
              <div>
                <div className="font-medium text-gray-900">Ki·ªÉm tra & s·ª≠a ƒëi·ªÉm</div>
                <div className="text-sm text-gray-600">Xem l·∫°i v√† ch·ªânh s·ª≠a n·∫øu c·∫ßn</div>
              </div>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Main Action Buttons */}
      <div className="flex justify-center gap-4">
        <Button
          onClick={() => setShowCreateForm(true)}
          size="lg"
          className="flex items-center space-x-3 px-8 py-4 text-lg"
        >
          <Plus className="h-6 w-6" />
          <span>T·∫°o k·ª≥ b√°o c√°o m·ªõi</span>
        </Button>
      </div>

      {/* Simplified Tabs */}
      <Tabs value={activeTab} onValueChange={setActiveTab} className="space-y-6">
        <TabsList className="grid w-full grid-cols-2">
          <TabsTrigger value="periods" className="flex items-center space-x-2">
            <FileSpreadsheet className="h-4 w-4" />
            <span>Qu·∫£n l√Ω k·ª≥ b√°o c√°o</span>
          </TabsTrigger>
          <TabsTrigger value="students" className="flex items-center space-x-2">
            <Search className="h-4 w-4" />
            <span>Xem ƒëi·ªÉm s·ªë</span>
          </TabsTrigger>
        </TabsList>

        {/* Grade Reporting Periods Tab */}
        <TabsContent value="periods" className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle>Danh s√°ch k·ª≥ b√°o c√°o ƒëi·ªÉm s·ªë</CardTitle>
              <CardDescription>
                Qu·∫£n l√Ω c√°c k·ª≥ b√°o c√°o ƒëi·ªÉm s·ªë trong nƒÉm h·ªçc. M·ªói k·ª≥ c√≥ th·ªùi gian nh·∫≠p v√† ch·ªânh s·ª≠a ƒëi·ªÉm ri√™ng bi·ªát.
              </CardDescription>
            </CardHeader>
            <CardContent>
              {periodsWithStatus.length === 0 ? (
                <EmptyState
                  icon={FileSpreadsheet}
                  title="Ch∆∞a c√≥ k·ª≥ b√°o c√°o n√†o"
                  description="T·∫°o k·ª≥ b√°o c√°o ƒë·∫ßu ti√™n ƒë·ªÉ b·∫Øt ƒë·∫ßu qu·∫£n l√Ω ƒëi·ªÉm s·ªë"
                  action={
                    <Button onClick={() => setShowCreateForm(true)} size="lg">
                      <Plus className="h-5 w-5 mr-2" />
                      T·∫°o k·ª≥ b√°o c√°o ƒë·∫ßu ti√™n
                    </Button>
                  }
                />
              ) : (
                <div className="space-y-4">
                  {periodsWithStatus.map((period) => (
                    <Card key={period.id} className="border-l-4 border-l-blue-500">
                      <CardContent className="p-6">
                        <div className="flex items-center justify-between">
                          {/* Period Info */}
                          <div className="flex-1 space-y-3">
                            <div className="flex items-center space-x-4">
                              <h3 className="text-xl font-semibold text-gray-900">{period.name}</h3>
                              <Badge variant={period.status.variant} className="text-sm px-3 py-1">
                                {period.status.label}
                              </Badge>
                            </div>

                            <div className="text-sm text-gray-600">
                              <span className="font-medium">{period.academic_year?.name}</span> - <span className="font-medium">{period.semester?.name}</span>
                            </div>

                            <div className="grid grid-cols-1 md:grid-cols-3 gap-4 text-sm">
                              <div className="space-y-1">
                                <div className="text-gray-500">Th·ªùi gian k·ª≥ b√°o c√°o</div>
                                <div className="font-medium">{formatDate(period.start_date)} ‚Üí {formatDate(period.end_date)}</div>
                              </div>
                              <div className="space-y-1">
                                <div className="text-gray-500">H·∫°n ch√≥t nh·∫≠p ƒëi·ªÉm</div>
                                <div className={`font-medium ${period.canImport ? 'text-green-600' : 'text-red-600'}`}>
                                  {formatDate(period.import_deadline)}
                                </div>
                              </div>
                              <div className="space-y-1">
                                <div className="text-gray-500">H·∫°n ch√≥t s·ª≠a ƒëi·ªÉm</div>
                                <div className={`font-medium ${period.canEdit ? 'text-green-600' : 'text-red-600'}`}>
                                  {formatDate(period.edit_deadline)}
                                </div>
                              </div>
                            </div>
                          </div>

                          {/* Action Buttons */}
                          <div className="flex flex-col space-y-2 ml-6">
                            {period.canImport && (
                              <Button
                                onClick={() => {
                                  setSelectedPeriod(period)
                                  setShowExcelImport(true)
                                }}
                                className="w-full justify-start bg-green-600 hover:bg-green-700 text-white"
                              >
                                <FileSpreadsheet className="h-4 w-4 mr-2" />
                                Nh·∫≠p ƒëi·ªÉm t·ª´ Excel
                              </Button>
                            )}

                            <Button
                              variant="outline"
                              onClick={() => {
                                setSelectedPeriod(period)
                                setShowEditForm(true)
                              }}
                              className="w-full justify-start"
                            >
                              <Edit className="h-4 w-4 mr-2" />
                              C√†i ƒë·∫∑t k·ª≥ b√°o c√°o
                            </Button>

                            <Button
                              variant="outline"
                              onClick={() => {
                                setSelectedPeriod(period)
                                setShowDeleteDialog(true)
                              }}
                              className="w-full justify-start text-red-600 hover:text-red-700"
                            >
                              <Trash2 className="h-4 w-4 mr-2" />
                              X√≥a k·ª≥ b√°o c√°o
                            </Button>
                          </div>
                        </div>
                      </CardContent>
                    </Card>
                  ))}
                </div>
              )}
            </CardContent>
          </Card>
        </TabsContent>

        {/* View Grades Tab */}
        <TabsContent value="students" className="space-y-6">
          <ViewGradesClient />
        </TabsContent>






      </Tabs>

      {/* Dialogs */}
      {showCreateForm && (
        <GradeReportingPeriodForm
          open={showCreateForm}
          onOpenChange={setShowCreateForm}
          onSuccess={() => {
            setShowCreateForm(false)
            loadPeriods()
          }}
        />
      )}

      {showEditForm && selectedPeriod && (
        <GradeReportingPeriodForm
          open={showEditForm}
          onOpenChange={setShowEditForm}
          period={selectedPeriod}
          onSuccess={() => {
            setShowEditForm(false)
            setSelectedPeriod(null)
            loadPeriods()
          }}
        />
      )}



      {showDeleteDialog && selectedPeriod && (
        <ConfirmDialog
          open={showDeleteDialog}
          onOpenChange={setShowDeleteDialog}
          title="X√≥a k·ª≥ b√°o c√°o"
          description={`B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a k·ª≥ b√°o c√°o &ldquo;${selectedPeriod.name}&rdquo;? H√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ ho√†n t√°c.`}
          onConfirm={handleDeletePeriod}
          confirmText="X√≥a"
          variant="destructive"
        />
      )}

      {showExcelImport && selectedPeriod && (
        <ExcelImportDialog
          open={showExcelImport}
          onOpenChange={setShowExcelImport}
          period={selectedPeriod}
          onSuccess={() => {
            setShowExcelImport(false)
            setSelectedPeriod(null)
            // Optionally refresh data
          }}
        />
      )}
    </div>
  )
}
