"use client"

import { useState, useRef, useEffect } from "react"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"

import { Badge } from "@/components/ui/badge"
import { Slider } from "@/components/ui/slider"
import {
  Bot,
  Send,
  Sparkles,
  Copy,
  Share
} from "lucide-react"
import { toast } from "sonner"

// Import shared components and utilities to eliminate duplication
import { ChatAvatar, createMessage, formatTime, copyMessage, handleKeyPress } from "./parent-chatbot"

interface Message {
  id: string
  role: 'user' | 'assistant'
  content: string
  timestamp: Date
  contextUsed?: {
    studentsCount: number
    feedbackCount: number
    gradesCount: number
    violationsCount: number
  }
}

interface FullPageChatbotProps {
  readonly className?: string
}

export default function FullPageChatbot({ className }: FullPageChatbotProps) {
  const [messages, setMessages] = useState<Message[]>([
    {
      id: '1',
      role: 'assistant',
      content: 'Xin ch√†o! T√¥i l√† tr·ª£ l√Ω AI c·ªßa b·∫°n. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n theo d√µi t√¨nh h√¨nh h·ªçc t·∫≠p c·ªßa con em. H√£y h·ªèi t√¥i v·ªÅ ƒëi·ªÉm s·ªë, ph·∫£n h·ªìi t·ª´ gi√°o vi√™n, ho·∫∑c b·∫•t k·ª≥ th·∫Øc m·∫Øc n√†o v·ªÅ vi·ªác h·ªçc c·ªßa con b·∫°n.',
      timestamp: new Date()
    }
  ])
  const [inputMessage, setInputMessage] = useState('')
  const [isLoading, setIsLoading] = useState(false)
  const [isStreaming, setIsStreaming] = useState(false)
  const [fontSize, setFontSize] = useState([14]) // Font size setting

  const messagesEndRef = useRef<HTMLDivElement>(null)
  const inputRef = useRef<HTMLInputElement>(null)

  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' })
  }, [messages])

  useEffect(() => {
    if (inputRef.current) {
      inputRef.current.focus()
    }
  }, [])

  const sendMessage = async () => {
    if (!inputMessage.trim() || isLoading || isStreaming) return

    const userMessage = createMessage('user', inputMessage.trim())
    const messageText = inputMessage.trim()

    setMessages(prev => [...prev, userMessage])
    setInputMessage('')
    setIsLoading(true)
    setIsStreaming(true)

    try {
      // Prepare conversation history for API
      const conversationHistory = messages.map(msg => ({
        role: msg.role === 'assistant' ? 'model' : 'user',
        content: msg.content
      }))

      const response = await fetch('/api/chatbot/stream', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          message: messageText,
          history: conversationHistory
        })
      })

      if (!response.ok) {
        throw new Error('Failed to get response')
      }

      const reader = response.body?.getReader()
      if (!reader) {
        throw new Error('No response stream')
      }

      let accumulatedText = ''
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      let contextUsed: any = null
      let functionCalls = 0

      // Create initial assistant message
      const assistantMessageId = Date.now().toString()
      setMessages(prev => [...prev, createMessage('assistant', '', undefined, assistantMessageId)])

      while (true) {
        const { done, value } = await reader.read()
        if (done) break

        const chunk = new TextDecoder().decode(value)
        const lines = chunk.split('\n')

        for (const line of lines) {
          if (line.startsWith('data: ')) {
            try {
              const data = JSON.parse(line.slice(6))

              if (data.type === 'text') {
                accumulatedText += data.data

                // Update the assistant message in real-time
                setMessages(prev => prev.map(msg =>
                  msg.id === assistantMessageId
                    ? { ...msg, content: accumulatedText }
                    : msg
                ))
              } else if (data.type === 'function_results') {
                functionCalls = data.data.length
              } else if (data.type === 'complete') {
                contextUsed = data.data.contextUsed
                functionCalls = data.data.functionCalls || functionCalls
              } else if (data.type === 'error') {
                throw new Error(data.data.message)
              }
            } catch (parseError) {
              console.error('Error parsing chunk:', parseError)
            }
          }
        }
      }

      // Final update with context information
      if (contextUsed) {
        setMessages(prev => prev.map(msg =>
          msg.id === assistantMessageId
            ? { ...msg, content: accumulatedText, contextUsed }
            : msg
        ))
      }

    } catch (error) {
      console.error('Chat error:', error)
      toast.error('C√≥ l·ªói x·∫£y ra khi g·ª≠i tin nh·∫Øn. Vui l√≤ng th·ª≠ l·∫°i.')

      const errorMessage = createMessage('assistant', 'Xin l·ªói, t√¥i g·∫∑p s·ª± c·ªë k·ªπ thu·∫≠t. Vui l√≤ng th·ª≠ l·∫°i sau √≠t ph√∫t.')
      setMessages(prev => [...prev, errorMessage])
    } finally {
      setIsLoading(false)
      setIsStreaming(false)
    }
  }



  // Suggested prompts for parents
  const suggestedPrompts = [
    "ƒêi·ªÉm s·ªë g·∫ßn ƒë√¢y c·ªßa con em nh∆∞ th·∫ø n√†o?",
    "Con em c√≥ c·∫ßn c·∫£i thi·ªán m√¥n n√†o kh√¥ng?",
    "Ph·∫£n h·ªìi t·ª´ gi√°o vi√™n tu·∫ßn n√†y ra sao?",
    "Con em c√≥ ti·∫øn b·ªô g√¨ ƒë√°ng ch√∫ √Ω kh√¥ng?",
    "M√¥n n√†o con em h·ªçc t·ªët nh·∫•t?",
    "T√¥i n√™n h·ªó tr·ª£ con em h·ªçc t·∫≠p nh∆∞ th·∫ø n√†o?"
  ]

  return (
    <div className={`flex h-screen bg-white text-gray-900 ${className}`}>
      {/* Main Content - No separate sidebar, use existing layout */}
      <div className="flex-1 flex">
        {/* Chat Area */}
        {/* Chat Area */}
        <div className="flex-1 flex flex-col">
          {/* Top Bar */}
          <div className="h-16 border-b border-gray-200 flex items-center justify-between px-6 bg-white">
            <div className="flex items-center space-x-4">
              <div className="flex items-center space-x-2">
                <Bot className="h-6 w-6 text-blue-500" />
                <h2 className="text-lg font-semibold text-gray-900">Tr·ª£ L√Ω AI EduConnect</h2>
              </div>
              <Badge variant="outline" className="text-xs border-green-200 text-green-700 bg-green-50">
                ‚óè ƒêang ho·∫°t ƒë·ªông
              </Badge>
            </div>

            <div className="flex items-center space-x-2">
              <Button variant="ghost" size="sm" className="text-gray-600 hover:text-gray-900">
                <Copy className="h-4 w-4" />
              </Button>
              <Button variant="ghost" size="sm" className="text-gray-600 hover:text-gray-900">
                <Share className="h-4 w-4" />
              </Button>
            </div>
          </div>

          {/* Suggested Prompts */}
          {messages.length === 1 && (
            <div className="p-6 border-b border-gray-200 bg-gray-50">
              <h3 className="text-sm font-medium text-gray-700 mb-3">üí° G·ª£i √Ω c√¢u h·ªèi:</h3>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-2">
                {suggestedPrompts.map((prompt, index) => (
                  <Button
                    key={`prompt-${prompt.slice(0, 20)}-${index}`}
                    variant="outline"
                    className="text-left justify-start h-auto p-3 text-sm text-gray-700 border-gray-200 hover:bg-blue-50 hover:border-blue-300"
                    onClick={() => setInputMessage(prompt)}
                  >
                    {prompt}
                  </Button>
                ))}
              </div>
            </div>
          )}

          {/* Messages */}
          <div className="flex-1 overflow-y-auto p-6 space-y-6 bg-white">
            {messages.map((message) => (
              <div key={message.id} className="group">
                <div className="flex items-start space-x-4">
                  <ChatAvatar role={message.role} size="sm" />

                  <div className="flex-1 min-w-0">
                    <div className="flex items-center space-x-2 mb-1">
                      <span className="text-sm font-medium text-gray-900">
                        {message.role === 'user' ? 'B·∫°n' : 'EduConnect AI'}
                      </span>
                      <span className="text-xs text-gray-500">
                        {formatTime(message.timestamp)}
                      </span>
                    </div>

                    <div className="prose max-w-none">
                      <p
                        className="text-gray-800 whitespace-pre-wrap leading-relaxed"
                        style={{ fontSize: `${fontSize[0]}px` }}
                      >
                        {message.content}
                      </p>
                    </div>
                    
                    {/* Context info for assistant messages */}
                    {message.role === 'assistant' && message.contextUsed && (
                      <div className="mt-3 p-3 bg-blue-50 rounded-lg border border-blue-200">
                        <div className="flex items-center space-x-2 text-xs text-blue-700">
                          <Sparkles className="h-3 w-3" />
                          <span>D·ª±a tr√™n {message.contextUsed.feedbackCount} ph·∫£n h·ªìi, {message.contextUsed.gradesCount} ƒëi·ªÉm s·ªë</span>
                        </div>
                      </div>
                    )}

                    {/* Action buttons */}
                    <div className="flex items-center space-x-2 mt-2 opacity-0 group-hover:opacity-100 transition-opacity">
                      <Button
                        variant="ghost"
                        size="sm"
                        onClick={() => copyMessage(message.content)}
                        className="h-6 px-2 text-xs text-gray-600 hover:text-gray-900"
                      >
                        <Copy className="h-3 w-3 mr-1" />
                        Copy
                      </Button>
                    </div>
                  </div>
                </div>
              </div>
            ))}
            
            {/* Loading indicator */}
            {(isLoading && !isStreaming) && (
              <div className="flex items-start space-x-4">
                <ChatAvatar role="assistant" size="sm" />
                <div className="flex-1">
                  <div className="flex items-center space-x-2 mb-1">
                    <span className="text-sm font-medium text-gray-900">EduConnect AI</span>
                  </div>
                  <div className="flex space-x-1">
                    <div className="w-2 h-2 bg-blue-400 rounded-full animate-bounce"></div>
                    <div className="w-2 h-2 bg-blue-400 rounded-full animate-bounce" style={{ animationDelay: '0.1s' }}></div>
                    <div className="w-2 h-2 bg-blue-400 rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
                  </div>
                </div>
              </div>
            )}

            {/* Streaming indicator */}
            {isStreaming && (
              <div className="flex items-start space-x-4">
                <ChatAvatar role="assistant" size="sm" />
                <div className="flex-1">
                  <div className="flex items-center space-x-2 mb-1">
                    <span className="text-sm font-medium text-gray-900">EduConnect AI</span>
                  </div>
                  <div className="flex items-center space-x-2">
                    <div className="w-2 h-2 bg-blue-500 rounded-full animate-pulse"></div>
                    <span className="text-sm text-gray-600">ƒêang tr·∫£ l·ªùi...</span>
                  </div>
                </div>
              </div>
            )}
            
            <div ref={messagesEndRef} />
          </div>

          {/* Input Area */}
          <div className="border-t border-gray-200 p-6 bg-white">
            <div className="flex space-x-4">
              <div className="flex-1">
                <Input
                  ref={inputRef}
                  value={inputMessage}
                  onChange={(e) => setInputMessage(e.target.value)}
                  onKeyDown={(e) => handleKeyPress(e, sendMessage)}
                  placeholder="H·ªèi v·ªÅ t√¨nh h√¨nh h·ªçc t·∫≠p c·ªßa con em..."
                  disabled={isLoading || isStreaming}
                  className="bg-white border-gray-300 text-gray-900 placeholder-gray-500 focus:border-blue-500 focus:ring-blue-500"
                />
              </div>
              <Button
                onClick={sendMessage}
                disabled={!inputMessage.trim() || isLoading || isStreaming}
                className="bg-blue-500 hover:bg-blue-600 text-white"
              >
                <Send className="h-4 w-4" />
              </Button>
            </div>
          </div>
        </div>

        {/* Right Sidebar - Settings */}
        <div className="w-80 bg-gray-50 border-l border-gray-200 p-6">
          <div className="space-y-6">
            <div>
              <h3 className="text-sm font-medium text-gray-700 mb-4">‚öôÔ∏è C√ÄI ƒê·∫∂T HI·ªÇN TH·ªä</h3>

              <div className="space-y-4">
                <div>
                  <div className="flex justify-between items-center mb-2">
                    <label htmlFor="font-size-slider" className="text-xs font-medium text-gray-600">K√≠ch c·ª° ch·ªØ</label>
                    <span className="text-xs text-gray-600">{fontSize[0]}px</span>
                  </div>
                  <Slider
                    id="font-size-slider"
                    value={fontSize}
                    onValueChange={setFontSize}
                    max={20}
                    min={10}
                    step={1}
                    className="w-full"
                  />
                  <div className="flex justify-between text-xs text-gray-500 mt-1">
                    <span>Nh·ªè</span>
                    <span>V·ª´a</span>
                    <span>L·ªõn</span>
                  </div>
                </div>
              </div>
            </div>

            <div>
              <h3 className="text-sm font-medium text-gray-700 mb-4">üìã TH√îNG TIN</h3>
              <div className="bg-white rounded-lg p-4 border border-gray-200">
                <div className="space-y-2 text-xs text-gray-600">
                  <div className="flex justify-between">
                    <span>Model:</span>
                    <span className="font-medium">EduConnect AI</span>
                  </div>
                  <div className="flex justify-between">
                    <span>Phi√™n b·∫£n:</span>
                    <span className="font-medium">2.0</span>
                  </div>
                  <div className="flex justify-between">
                    <span>Tr·∫°ng th√°i:</span>
                    <span className="font-medium text-green-600">‚óè Ho·∫°t ƒë·ªông</span>
                  </div>
                </div>
              </div>
            </div>

            <div>
              <h3 className="text-sm font-medium text-gray-700 mb-4">üí° H∆Ø·ªöNG D·∫™N</h3>
              <div className="bg-blue-50 rounded-lg p-4 border border-blue-200">
                <div className="space-y-2 text-xs text-blue-700">
                  <p>‚Ä¢ H·ªèi v·ªÅ ƒëi·ªÉm s·ªë v√† th√†nh t√≠ch h·ªçc t·∫≠p</p>
                  <p>‚Ä¢ Xem ph·∫£n h·ªìi t·ª´ gi√°o vi√™n</p>
                  <p>‚Ä¢ Theo d√µi ti·∫øn b·ªô c·ªßa con em</p>
                  <p>‚Ä¢ Nh·∫≠n t∆∞ v·∫•n h·ªó tr·ª£ h·ªçc t·∫≠p</p>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  )
}
