import { createClient } from '@/utils/supabase/server'

interface ReportNotificationEmailData {
  parentEmail: string
  parentName: string
  studentName: string
  reportPeriodName: string
  startDate: string
  endDate: string
  resendReason?: string
}

/**
 * Send email notification to parent about new report
 */
export async function sendReportNotificationEmail(data: ReportNotificationEmailData) {
  try {
    const supabase = await createClient()

    // Format dates for display
    const startDate = new Date(data.startDate).toLocaleDateString('vi-VN', {
      day: '2-digit',
      month: '2-digit',
      year: 'numeric'
    })
    const endDate = new Date(data.endDate).toLocaleDateString('vi-VN', {
      day: '2-digit',
      month: '2-digit',
      year: 'numeric'
    })

    // Create email subject and content
    const subject = data.resendReason 
      ? `[C·∫≠p nh·∫≠t] B√°o c√°o h·ªçc t·∫≠p ${data.reportPeriodName} - ${data.studentName}`
      : `B√°o c√°o h·ªçc t·∫≠p ${data.reportPeriodName} - ${data.studentName}`

    const emailContent = `
K√≠nh g·ª≠i ${data.parentName},

${data.resendReason 
  ? `Gi√°o vi√™n ƒë√£ c·∫≠p nh·∫≠t v√† g·ª≠i l·∫°i b√°o c√°o h·ªçc t·∫≠p c·ªßa con em. L√Ω do g·ª≠i l·∫°i: ${data.resendReason}`
  : 'Ch√∫ng t√¥i xin th√¥ng b√°o b√°o c√°o h·ªçc t·∫≠p c·ªßa con em ƒë√£ s·∫µn s√†ng.'
}

üìö **Th√¥ng tin b√°o c√°o:**
- H·ªçc sinh: ${data.studentName}
- K·ª≥ b√°o c√°o: ${data.reportPeriodName}
- Th·ªùi gian: ${startDate} - ${endDate}

Qu√Ω ph·ª• huynh vui l√≤ng ƒëƒÉng nh·∫≠p v√†o h·ªá th·ªëng ƒë·ªÉ xem chi ti·∫øt b√°o c√°o h·ªçc t·∫≠p v√† t√¨nh h√¨nh r√®n luy·ªán c·ªßa con em.

üîó **Truy c·∫≠p h·ªá th·ªëng:** [ƒêƒÉng nh·∫≠p t·∫°i ƒë√¢y](${process.env.NEXT_PUBLIC_APP_URL}/auth/login)

N·∫øu c√≥ b·∫•t k·ª≥ th·∫Øc m·∫Øc n√†o, qu√Ω ph·ª• huynh vui l√≤ng li√™n h·ªá v·ªõi gi√°o vi√™n ch·ªß nhi·ªám ho·∫∑c nh√† tr∆∞·ªùng.

Tr√¢n tr·ªçng,
Ban Gi√°m hi·ªáu
    `.trim()

    // Store email in database for tracking (if table exists)
    try {
      const { error: emailError } = await supabase
        .from('email_notifications')
        .insert({
          recipient_email: data.parentEmail,
          recipient_name: data.parentName,
          subject: subject,
          content: emailContent,
          type: 'report_notification',
          status: 'sent',
          sent_at: new Date().toISOString()
        })

      if (emailError) {
        console.error('Error storing email notification:', emailError)
        // Don't fail the operation if email storage fails
      }
    } catch (tableError) {
      console.log('Email notifications table not found, skipping storage:', tableError)
      // Continue without storing - this is not critical
    }

    // In a real application, you would integrate with an email service like:
    // - SendGrid
    // - AWS SES
    // - Resend
    // - Nodemailer with SMTP
    
    // For now, we'll just log the email (in production, replace with actual email sending)
    console.log('Email notification sent:', {
      to: data.parentEmail,
      subject: subject,
      content: emailContent
    })

    return { success: true }
  } catch (error) {
    console.error('Error sending email notification:', error)
    return { 
      success: false, 
      error: error instanceof Error ? error.message : 'Failed to send email notification' 
    }
  }
}

/**
 * Send resend notification email with reason
 */
export async function sendResendNotificationEmail(
  data: Omit<ReportNotificationEmailData, 'resendReason'> & { resendReason: string }
) {
  return sendReportNotificationEmail(data)
}
